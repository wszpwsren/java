异常
Java异常是一个类，产生异常就是创建异常对象，并进行中断处理
根类Java.lang.Throwable
分为Error/Exception
Exception：编译期异常
RuntimeException，运行期异常

SimpleDateFormat.parse(编译器异常)处理方法以下
1.Throws，交给虚拟机处理，直接中断
2.try catch，抛出异常之后，后续代码正常执行

（运行期异常）处理方法
通过try catch
try{}，{}内 存放可能出现异常的代码
catch{}，{}内 存放异常的处理逻辑

Error 错误，处理方法为必须修改原代码

异常产生及处理
JVM检测出程序会产生异常时
1.JVM会根据异常产生的原因创建一个异常对象，其中包含异常产生的（内容，原因，位置）
2.在getElement方法中，没有异常的处理逻辑（try catch），那么JVM会把异常对象抛出给方法的调用者（main）来处理这个异常-》main方法也没有异常的处理逻辑，继续把对象抛出给main方法的调用者JVM处理-》JVM 1.把异常对象以红色字体打印在console中 2 .JVM中断程序

异常的处理：try catch finally throw throws

throw
使用throw在指定的方法中抛出指定的异常
throw new xxxException（“异常产生的原因”）；
zy：
1.throw关键字必须写在方法内部
2.throw关键字后面的new对象必须是Exception或Exception的子类对象
3.throw关键字抛出指定的异常对象，我们就必须处理异常对象
	[[throw创建的RuntimeException或其子类，我们可以不处理，默认交给JVM]]
	throw关键字后创建的是编译异常，我们必须处理（throws，try catch）
首先对方法传递的参数进行合法性校检
如果参数不合法，那么必须使用抛出异常的方式，告知方法的调用者

Object类静态方法public static <T> T requireNonNull(T obj,String(覆写))
查看指定引用对象不是null

throws
异常处理的第一种方式，交给别人处理
会把异常对象声明抛出给方法的调用者处理，最终交给JVM处理――》中断处理
修饰符 返回值类型 方法名（参数列表）throws xxxException{}
zy：
throws关键字必须写在方法声明处
throws声明的异常必须是Exception或其子类
方法内部如果抛出了多个异常对象，throws必须声明多个异常
	如果抛出的多个异常对象有子父类关系，那么直接声明父类异常即可
调用了一个声明抛出异常的方法，我们就必须处理声明的异常
	要么继续throws，交给方法的调用者处理，最终给JVM处理；或者try catch自己处理异常
FileNotFoundException为编译异常，必须处理这个异常，可以使用throws继续声明抛出异常对象，让方法的调用者处理                        
FileNotFoundException为IOException的子类，只需要声明IOException

try catch
可以执行后续代码
try{可能产生异常的代码}
catch（定义一个异常的变量，用来接收try种抛出的异常对象）{异常的处理逻辑，异常之后如何处理}
catch一般会记录日志
zy：
try中可能会抛出多个异常对象，那么可以使用多个catch处理这些异常对象
如果try中出现了异常，那么会执行catch中的异常处理逻辑，执行完毕catch中的处理逻辑，继续执行try catch后的代码。

Throwable类
定义了三个异常处理方法
String getMessage（）返回此throwable的简短描述
String toString（）返回此throwable的详细消息字符串
void printStarkTrace（）Jvm打印异常对象（最全面）

finally
如果try出现异常，那么try异常后的代码无法执行
在语句try{}catch（）{}catch（）{}finally{}
finally永远执行
finally一般用于资源释放，无论程序是否出现异常

异常注意事项
多个异常同时处理
一次try多个catch
	catch里定义的异常变量，如果有子父类关系，那么子类的异常变量必须卸载上面，否则报错（catch接收异常变量时顺序为从上到下，导致多态）
一次try一次处理
（只处理一次）
zy
运行时异常，可以不处理 //默认给JVM处理，中断处理
[[如果finally语句中有retrun，那么return默认输出finally值，要避免这种情况]]
如果父类抛出多个异常，子类重写父类方法时，子类只能抛出同样的异常（可以抛出父类声明的异常的子类异常）（也可以不声明异常）
父类不声明异常时，子类只能捕获处理（try catch），不能声明抛出

自定义异常
Java提供的异常类不够使用时定义
extends Exception{添加一个空参数的构造方法，添加一个带异常信息的构造方法} 或 extens RuntimeException{}
zy
自定义异常类一般以Exception结尾
自定义异常类，必须继承Exception(自定义编译期异常，如果方法内抛出异常，就必须处理)
或RuntimeException（可以不处理）
所有异常类有一个空参构造方法
所有异常类有一个带异常信息的构造方法，该方法将参数传给父类处理（super（xxx））

try catch需要处理return，以防止后续代码运行


多线程
并发：指多个事件在同一个时间段内发生（交替执行）
并行：指多个时间在同一时刻发生（同时）

进程（进入到内存的程序）：指一个内存中运行的应用程序，每个进程又一个独立的内存空间，一个应用程序可以同时运行多个进程
线程：
















